Index: src/main/java/com/crs/CarType.java
===================================================================
diff --git a/src/main/java/com/crs/CarType.java b/src/main/java/com/crs/CarType.java
deleted file mode 100644
--- a/src/main/java/com/crs/CarType.java	
+++ /dev/null	
@@ -1,5 +0,0 @@
-package com.crs;
-
-public enum CarType {
-    CARS, TRUCKS, SUVS, VANS, LUXURY;
-}
Index: src/main/java/com/crs/datahub/CarInventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/crs/datahub/CarInventory.java b/src/main/java/com/crs/datahub/CarInventory.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/crs/datahub/CarInventory.java	
@@ -0,0 +1,35 @@
+package com.crs.datahub;
+
+import com.crs.models.Car;
+import com.crs.models.CarType;
+
+import java.util.*;
+import java.util.function.Function;
+
+public class CarInventory {
+    //carInventory key should be car vin number? value should be car object;
+    public Map<String, Car> carInventory = new HashMap<>();
+
+    List<Car> carCollections = new ArrayList<>(
+            List.of(
+                    new Car("vin1", "WA98032", CarType.LUXURY, 109000.0, "2016", "Audi", "A3"),
+                    new Car("vin2", "WA98342", CarType.JEEP, 49000.0, "2017", "Ford", "JEEP"),
+                    new Car("vin3", "WA91232", CarType.SEDAN, 29000.0, "2018", "Honda", "Civic"),
+                    new Car("vin4", "WA98462", CarType.SPORTS, 109000.0, "2019", "Mitsubishi", "GTR")
+            )
+    );
+
+    public void setCarInventory(Car car) {
+        carInventory.put(car.getVin(), car);
+    }
+
+    public Map<String, Car> getCarInventory() {
+        return carInventory;
+    }
+
+    public void carInventoryInitialization() {
+        for(Car car: carCollections) {
+            setCarInventory(car);
+        }
+    }
+}
Index: src/main/java/com/crs/models/CarType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/crs/models/CarType.java b/src/main/java/com/crs/models/CarType.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/crs/models/CarType.java	
@@ -0,0 +1,5 @@
+package com.crs.models;
+
+public enum CarType {
+    SEDAN, SUV, VAN, LUXURY, JEEP, SPORTS;
+}
Index: CarReservationSystem.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarReservationSystem.iml b/CarReservationSystem.iml
new file mode 100644
--- /dev/null	
+++ b/CarReservationSystem.iml	
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: src/main/java/com/client/CRSClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/client/CRSClient.java b/src/main/java/com/client/CRSClient.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/client/CRSClient.java	
@@ -0,0 +1,18 @@
+package com.client;
+
+import com.crs.datahub.CarInventory;
+
+public class CRSClient {
+    public static void main(String[] args) {
+        CarInventory carInventory = new CarInventory();
+
+        carInventory.carInventoryInitialization();
+
+        System.out.println(carInventory.getCarInventory());
+
+        for(String vin : carInventory.carInventory.keySet()) {
+            System.out.println(carInventory.carInventory.get(vin));
+        }
+
+    }
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/CarReservationSystem.iml" filepath="$PROJECT_DIR$/CarReservationSystem.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/com/crs/exceptions/InvalidArgumentExceptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/crs/exceptions/InvalidArgumentExceptions.java b/src/main/java/com/crs/exceptions/InvalidArgumentExceptions.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/crs/exceptions/InvalidArgumentExceptions.java	
@@ -0,0 +1,16 @@
+package com.crs.exceptions;
+
+public class InvalidArgumentExceptions extends IllegalArgumentException {
+
+    public InvalidArgumentExceptions() {
+        super();
+    }
+
+    public InvalidArgumentExceptions(String s) {
+        super(s);
+    }
+
+    public InvalidArgumentExceptions(String message, Throwable cause) {
+        super(message, cause);
+    }
+}
Index: src/main/java/com/crs/models/Car.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/crs/models/Car.java b/src/main/java/com/crs/models/Car.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/com/crs/models/Car.java	
@@ -0,0 +1,105 @@
+package com.crs.models;
+
+public class Car {
+
+    private String vin;
+
+    private String plateNumber;
+
+    private CarType carType;
+
+    private double price;
+
+    private String year;
+
+    private String make;
+
+    private String model;
+
+    private boolean isReserved;
+
+    public Car() {}
+
+    public Car(String vin) {
+        setVin(vin);
+    }
+    public Car(String vin, String plateNumber, CarType carType, double price, String year, String make, String model) {
+        this.vin = vin;
+        this.plateNumber = plateNumber;
+        this.carType = carType;
+        this.price = price;
+        this.year = year;
+        this.make = make;
+        this.model = model;
+    }
+
+    public String getVin() {
+        return vin;
+    }
+
+    public void setVin(String vin) {
+        this.vin = vin;
+    }
+
+    public String getPlateNumber() {
+        return plateNumber;
+    }
+
+    public void setPlateNumber(String plateNumber) {
+        this.plateNumber = plateNumber;
+    }
+
+    public CarType getCarType() {
+        return carType;
+    }
+
+    public void setCarType(CarType carType) {
+        this.carType = carType;
+    }
+
+    public double getPrice() {
+        return price;
+    }
+
+    public void setPrice(double price) {
+        this.price = price;
+    }
+
+    public String getYear() {
+        return year;
+    }
+
+    public void setYear(String year) {
+        this.year = year;
+    }
+
+    public String getMake() {
+        return make;
+    }
+
+    public void setMake(String make) {
+        this.make = make;
+    }
+
+    public String getModel() {
+        return model;
+    }
+
+    public void setModel(String model) {
+        this.model = model;
+    }
+
+    public boolean isReserved() {
+        return isReserved;
+    }
+
+    public void setReserved(boolean reserved) {
+        isReserved = reserved;
+    }
+
+    @Override
+    public String toString() {
+
+        return null;
+    }
+}
